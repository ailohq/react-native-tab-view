{"version":3,"sources":["TabBar.tsx"],"names":["TabBar","React","Component","layout","width","height","tabWidths","undefined","Animated","Value","style","tabStyle","StyleSheet","flatten","index","routes","scrollEnabled","flattenedWidth","key","endsWith","parseFloat","Number","isFinite","length","i","getComputedTabWidth","tabBarWidth","layoutWidth","props","state","navigationState","reduce","acc","_","getFlattenedTabWidth","value","getTabBarWidth","maxDistance","getMaxScrollDistance","scrollValue","Math","max","min","Platform","OS","I18nManager","isRTL","centerDistance","Array","from","total","tabWidth","scrollAmount","normalizeScrollValue","animated","scrollView","scrollTo","x","getScrollAmount","e","nativeEvent","requestAnimationFrame","setState","maxScrollDistance","multiply","sub","componentDidUpdate","prevProps","prevState","isWidthDynamic","animatedScroll","scrollToTab","render","position","jumpTo","bounces","getAccessibilityLabel","getAccessible","getLabelText","getTestID","renderBadge","renderIcon","renderLabel","renderTabBarItem","activeColor","inactiveColor","pressColor","pressOpacity","onTabPress","onTabLongPress","labelStyle","indicatorStyle","contentContainerStyle","indicatorContainerStyle","tabBarWidthPercent","translateX","getTranslateX","handleLayout","styles","tabBar","indicatorContainer","transform","renderIndicator","getTabWidth","getMemoizedTabWidthGettter","scroll","tabContent","container","event","contentOffset","el","getNode","map","route","onLayout","measuredTabWidths","every","r","onPress","defaultPrevented","preventDefault","onLongPress","title","toUpperCase","accessible","accessibilityLabel","testID","create","flex","overflow","select","default","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  ScrollView,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport TabBarItem, { Props as TabBarItemProps } from './TabBarItem';\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\nimport memoize from './memoize';\nimport {\n  Route,\n  Scene,\n  SceneRendererProps,\n  NavigationState,\n  Layout,\n  Event,\n} from './types';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype State = {\n  layout: Layout;\n  tabWidths?: { [key: string]: number };\n};\n\nexport default class TabBar<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    getLabelText: ({ route }: Scene<Route>) =>\n      typeof route.title === 'string' ? route.title.toUpperCase() : route.title,\n    getAccessible: ({ route }: Scene<Route>) =>\n      typeof route.accessible !== 'undefined' ? route.accessible : true,\n    getAccessibilityLabel: ({ route }: Scene<Route>) =>\n      typeof route.accessibilityLabel === 'string'\n        ? route.accessibilityLabel\n        : typeof route.title === 'string'\n        ? route.title\n        : undefined,\n    getTestID: ({ route }: Scene<Route>) => route.testID,\n    renderIndicator: (props: IndicatorProps<Route>) => (\n      <TabBarIndicator {...props} />\n    ),\n  };\n\n  state: State = {\n    layout: { width: 0, height: 0 },\n    tabWidths: undefined,\n  };\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    const { navigationState } = this.props;\n    const { layout, tabWidths } = this.state;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        navigationState.routes.length ||\n      prevProps.navigationState.index !== navigationState.index ||\n      prevState.layout.width !== layout.width ||\n      prevState.tabWidths !== tabWidths\n    ) {\n      const isWidthDynamic =\n        this.getFlattenedTabWidth(this.props.tabStyle) === 'auto';\n      if (isWidthDynamic && (!layout.width || !tabWidths)) {\n        return;\n      }\n\n      // Do not use animated scroll on initial render\n      // (that is, when layout is not yet calculated)\n      const animatedScroll = isWidthDynamic\n        ? !!prevState.tabWidths && !!prevState.layout.width\n        : !!prevState.layout.width;\n      this.scrollToTab(navigationState.index, animatedScroll);\n    }\n  }\n\n  // to store the layout.width of each tab\n  // when all onLayout's are fired, this would be set in state\n  private measuredTabWidths: { [key: string]: number } = {};\n\n  private scrollAmount = new Animated.Value(0);\n\n  private scrollView: ScrollView | undefined;\n\n  private getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n    const tabStyle = StyleSheet.flatten(style);\n\n    return tabStyle ? tabStyle.width : undefined;\n  };\n\n  private getComputedTabWidth = (\n    index: number,\n    layout: Layout,\n    routes: Route[],\n    scrollEnabled: boolean | undefined,\n    tabWidths: { [key: string]: number } | undefined,\n    flattenedWidth: string | number | undefined\n  ) => {\n    if (flattenedWidth === 'auto') {\n      return tabWidths?.[routes[index].key] || 0;\n    }\n\n    switch (typeof flattenedWidth) {\n      case 'number':\n        return flattenedWidth;\n      case 'string':\n        if (flattenedWidth.endsWith('%')) {\n          const width = parseFloat(flattenedWidth);\n          if (Number.isFinite(width)) {\n            return layout.width * (width / 100);\n          }\n        }\n    }\n\n    if (scrollEnabled) {\n      return (layout.width / 5) * 2;\n    }\n\n    return layout.width / routes.length;\n  };\n\n  private getMemoizedTabWidthGettter = memoize(\n    (\n      layout: Layout,\n      routes: Route[],\n      scrollEnabled: boolean | undefined,\n      tabWidths: { [key: string]: number } | undefined,\n      flattenedWidth: string | number | undefined\n    ) => (i: number) =>\n      this.getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedWidth\n      )\n  );\n\n  private getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n    tabBarWidth - layoutWidth;\n\n  private getTabBarWidth = (props: Props<T>, state: State) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    return routes.reduce<number>(\n      (acc, _, i) =>\n        acc +\n        this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        ),\n      0\n    );\n  };\n\n  private normalizeScrollValue = (\n    props: Props<T>,\n    state: State,\n    value: number\n  ) => {\n    const { layout } = state;\n    const tabBarWidth = this.getTabBarWidth(props, state);\n    const maxDistance = this.getMaxScrollDistance(tabBarWidth, layout.width);\n    const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n    if (Platform.OS === 'android' && I18nManager.isRTL) {\n      // On Android, scroll value is not applied in reverse in RTL\n      // so we need to manually adjust it to apply correct value\n      return maxDistance - scrollValue;\n    }\n\n    return scrollValue;\n  };\n\n  private getScrollAmount = (props: Props<T>, state: State, index: number) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    const centerDistance = Array.from({ length: index + 1 }).reduce<number>(\n      (total, _, i) => {\n        const tabWidth = this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        );\n\n        // To get the current index centered we adjust scroll amount by width of indexes\n        // 0 through (i - 1) and add half the width of current index i\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      },\n      0\n    );\n\n    const scrollAmount = centerDistance - layout.width / 2;\n\n    return this.normalizeScrollValue(props, state, scrollAmount);\n  };\n\n  private scrollToTab = (index: number, animated: boolean = true) => {\n    if (this.props.scrollEnabled) {\n      this.scrollView &&\n        this.scrollView.scrollTo({\n          x: this.getScrollAmount(this.props, this.state, index),\n          animated,\n        });\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    // If we don't delay this state update, the UI gets stuck in weird state\n    // Maybe an issue in Reanimated?\n    // https://github.com/react-native-community/react-native-tab-view/issues/877\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() =>\n        this.setState({\n          layout: {\n            height,\n            width,\n          },\n        })\n      )\n    );\n  };\n\n  private getTranslateX = memoize(\n    (scrollAmount: Animated.Node<number>, maxScrollDistance: number) =>\n      Animated.multiply(\n        Platform.OS === 'android' && I18nManager.isRTL\n          ? Animated.sub(maxScrollDistance, scrollAmount)\n          : scrollAmount,\n        I18nManager.isRTL ? 1 : -1\n      )\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      jumpTo,\n      scrollEnabled,\n      bounces,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      activeColor,\n      inactiveColor,\n      pressColor,\n      pressOpacity,\n      onTabPress,\n      onTabLongPress,\n      tabStyle,\n      labelStyle,\n      indicatorStyle,\n      contentContainerStyle,\n      style,\n      indicatorContainerStyle,\n    } = this.props;\n    const { layout, tabWidths } = this.state;\n    const { routes } = navigationState;\n\n    const isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n    const tabBarWidth = this.getTabBarWidth(this.props, this.state);\n    const tabBarWidthPercent = `${routes.length * 40}%`;\n    const translateX = this.getTranslateX(\n      this.scrollAmount,\n      this.getMaxScrollDistance(tabBarWidth, layout.width)\n    );\n\n    return (\n      <Animated.View\n        onLayout={this.handleLayout}\n        style={[styles.tabBar, style]}\n      >\n        <Animated.View\n          pointerEvents=\"none\"\n          style={[\n            styles.indicatorContainer,\n            scrollEnabled ? { transform: [{ translateX }] as any } : null,\n            tabBarWidth\n              ? { width: tabBarWidth }\n              : scrollEnabled\n              ? { width: tabBarWidthPercent }\n              : null,\n            indicatorContainerStyle,\n          ]}\n        >\n          {this.props.renderIndicator({\n            position,\n            layout,\n            navigationState,\n            jumpTo,\n            width: isWidthDynamic ? 'auto' : `${100 / routes.length}%`,\n            style: indicatorStyle,\n            getTabWidth: this.getMemoizedTabWidthGettter(\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              this.getFlattenedTabWidth(tabStyle)\n            ),\n          })}\n        </Animated.View>\n        <View style={styles.scroll}>\n          <Animated.ScrollView\n            horizontal\n            accessibilityRole=\"tablist\"\n            keyboardShouldPersistTaps=\"handled\"\n            scrollEnabled={scrollEnabled}\n            bounces={bounces}\n            alwaysBounceHorizontal={false}\n            scrollsToTop={false}\n            showsHorizontalScrollIndicator={false}\n            automaticallyAdjustContentInsets={false}\n            overScrollMode=\"never\"\n            contentContainerStyle={[\n              styles.tabContent,\n              scrollEnabled\n                ? { width: tabBarWidth || tabBarWidthPercent }\n                : styles.container,\n              contentContainerStyle,\n            ]}\n            scrollEventThrottle={16}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: { x: this.scrollAmount },\n                },\n              },\n            ])}\n            ref={(el) => {\n              // @ts-ignore\n              this.scrollView = el?.getNode();\n            }}\n          >\n            {routes.map((route: T) => {\n              const props: TabBarItemProps<T> & { key: string } = {\n                key: route.key,\n                position: position,\n                route: route,\n                navigationState: navigationState,\n                getAccessibilityLabel: getAccessibilityLabel,\n                getAccessible: getAccessible,\n                getLabelText: getLabelText,\n                getTestID: getTestID,\n                renderBadge: renderBadge,\n                renderIcon: renderIcon,\n                renderLabel: renderLabel,\n                activeColor: activeColor,\n                inactiveColor: inactiveColor,\n                pressColor: pressColor,\n                pressOpacity: pressOpacity,\n                onLayout: isWidthDynamic\n                  ? (e) => {\n                      this.measuredTabWidths[route.key] =\n                        e.nativeEvent.layout.width;\n\n                      // When we have measured widths for all of the tabs, we should updates the state\n                      // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                      if (\n                        routes.every(\n                          (r) =>\n                            typeof this.measuredTabWidths[r.key] === 'number'\n                        )\n                      ) {\n                        this.setState({\n                          tabWidths: { ...this.measuredTabWidths },\n                        });\n                      }\n                    }\n                  : undefined,\n                onPress: () => {\n                  const event: Scene<T> & Event = {\n                    route,\n                    defaultPrevented: false,\n                    preventDefault: () => {\n                      event.defaultPrevented = true;\n                    },\n                  };\n\n                  onTabPress?.(event);\n\n                  if (event.defaultPrevented) {\n                    return;\n                  }\n\n                  this.props.jumpTo(route.key);\n                },\n                onLongPress: () => onTabLongPress?.({ route }),\n                labelStyle: labelStyle,\n                style: tabStyle,\n              };\n\n              return renderTabBarItem ? (\n                renderTabBarItem(props)\n              ) : (\n                <TabBarItem {...props} />\n              );\n            })}\n          </Animated.ScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]}